/* tslint:disable */
/* eslint-disable */
/**
 * Nessie API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    DeltaLakeTable,
    HiveDatabase,
    HiveTable,
    IcebergTable,
    SqlView,
    DeltaLakeTableFromJSONTyped,
    DeltaLakeTableToJSON,
    HiveDatabaseFromJSONTyped,
    HiveDatabaseToJSON,
    HiveTableFromJSONTyped,
    HiveTableToJSON,
    IcebergTableFromJSONTyped,
    IcebergTableToJSON,
    SqlViewFromJSONTyped,
    SqlViewToJSON,
} from './';

/**
 * @type Contents
 * @export
 */
export type Contents = { type: 'ICEBERG_TABLE' } & IcebergTable | { type: 'DELTA_LAKE_TABLE' } & DeltaLakeTable | { type: 'VIEW' } & SqlView | { type: 'HIVE_TABLE' } & HiveTable | { type: 'HIVE_DATABASE' } & HiveDatabase;

export function ContentsFromJSON(json: any): Contents {
    return ContentsFromJSONTyped(json, false);
}

export function ContentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Contents {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['type']) {
        case 'ICEBERG_TABLE':
            return {...IcebergTableFromJSONTyped(json, true), type: 'ICEBERG_TABLE'};
        case 'DELTA_LAKE_TABLE':
            return {...DeltaLakeTableFromJSONTyped(json, true), type: 'DELTA_LAKE_TABLE'};
        case 'VIEW':
            return {...SqlViewFromJSONTyped(json, true), type: 'VIEW'};
        case 'HIVE_TABLE':
            return {...HiveTableFromJSONTyped(json, true), type: 'HIVE_TABLE'};
        case 'HIVE_DATABASE':
            return {...HiveDatabaseFromJSONTyped(json, true), type: 'HIVE_DATABASE'};
        default:
            throw new Error(`No variant of Contents exists with 'type=${json['type']}'`);
    }
}

export function ContentsToJSON(value?: Contents | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['type']) {
        case 'ICEBERG_TABLE':
            return IcebergTableToJSON(value);
        case 'DELTA_LAKE_TABLE':
            return DeltaLakeTableToJSON(value);
        case 'VIEW':
            return SqlViewToJSON(value);
        case 'HIVE_TABLE':
            return HiveTableToJSON(value);
        case 'HIVE_DATABASE':
            return HiveDatabaseToJSON(value);
        default:
            throw new Error(`No variant of Contents exists with 'type=${value['type']}'`);
    }
}

